For extra credit in this project, we chose to mitigate the extra threat of a stolen password database. The first part of the threat mitigated is that if the adversary steals the database, they will not be able to outright see any userâ€™s password since we store a hash of the password, hashed using bcrypt 8 times. In the event this database is stolen, the adversary may also attempt to use a brute force method of hashing common passwords to see if they can find any matches within the database. In order to mitigate this threat we created random user-specific salts that are stored on the user database. These salts are used in the bcrypt hash function and create even more unique outputs. This means that two users with the same password will have different hashed passwords stored for them, providing the adversary with less information. The adversary will now not be able to run a brute force attack on the password database either as long as they do not have the user database.